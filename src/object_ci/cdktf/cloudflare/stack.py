from __future__ import annotations

import logging

import cdktf
from cdktf_cdktf_provider_cloudflare import provider, record
from constructs import Construct

from object_ci.utils import getenv_or_raise

from .types import RecordName, RecordType

logger = logging.getLogger(__name__)


class CloudflareStack(cdktf.TerraformStack):
    def __init__(
        self,
        scope: Construct,
        id: str,
        *,
        terraform_organization: str = "object-Object",
        terraform_workspace: str,
        cloudflare_zone_id: str,
        cloudflare_api_token: str | None = None,
    ):
        logger.info(f"Initializing stack: {id}")
        super().__init__(scope, id)

        self.zone_id = cloudflare_zone_id

        self.backend = cdktf.CloudBackend(
            self,
            organization=terraform_organization,
            workspaces=cdktf.NamedCloudWorkspace(terraform_workspace),
        )

        self.cloudflare_provider = provider.CloudflareProvider(
            self,
            "CloudflareProvider",
            api_token=cloudflare_api_token or getenv_or_raise("CLOUDFLARE_API_TOKEN"),
        )

    def simple_record(
        self,
        *,
        type_: RecordType,
        name: str | RecordName | None,
        value: str,
        comment: str | None = "Generated by CDKTF.",
        priority: int | None = None,
        proxied: bool = False,
        ttl: int | None = None,
        data: record.RecordData | None = None,
    ):
        name, display_name = self._record_display_name(name)
        record_id = "_".join(s for s in [type_, display_name, value] if s is not None)
        return record.Record(
            self,
            record_id,
            zone_id=self.zone_id,
            type=type_,
            name=name,
            value=value,
            comment=comment,
            priority=priority,
            proxied=proxied,
            ttl=ttl,
            data=data,
        )

    def _record_display_name(
        self,
        name: str | RecordName | None,
    ) -> tuple[str, str | None]:
        """Returns: name, display_name"""
        match name:
            case RecordName() as enum:
                return enum.record_name, enum.display_name
            case str() if enum := RecordName.from_record_name(name):
                return name, enum.display_name
            case str():
                return name, name
            case None:
                return RecordName.ROOT.record_name, None
